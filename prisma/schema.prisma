// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @unique @default(cuid())
  name             String?
  firstName        String   @default("")
  lastName         String   @default("")
  phone            String
  email            String   @unique
  admin            Boolean  @default(false)
  god              Boolean  @default(false)
  emailIsValidated Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  agencyName       String   @default("")
  agencyWebsite    String   @default("")

  appartments      Appartment[]
  sessions         Session[]
  keys             Key[]
  emailValidations EmailValidation[]
  Report           Report[]
  PasswordReset    PasswordReset[]
  Log              Log[]
  Like             Like[]

  @@map("user")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model EmailValidation {
  id      String @id @unique @default(cuid())
  user_id String
  expires BigInt
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model PasswordReset {
  id      String @id @unique @default(cuid())
  expires BigInt
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  expires         BigInt?
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

model Like {
  id           String     @id @unique @default(cuid())
  createdAt    DateTime   @default(now())
  by           User       @relation(fields: [userId], references: [id])
  of           Appartment @relation(fields: [appartmentId], references: [id])
  userId       String
  appartmentId String

  @@unique([userId, appartmentId], name: "oneLikePerUser")
}

model Appartment {
  id                  String                   @id @unique @default(cuid())
  number              Int                      @unique @default(autoincrement())
  photos              Photo[]
  rent                Int
  charges             Int                      @default(0)
  deposit             Int                      @default(0)
  surface             Int
  kind                AppartmentKind
  roomsCount          Int
  availableAt         DateTime
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  address             String
  latitude            Float?
  longitude           Float?
  hasFurniture        Boolean?
  hasParking          Boolean?
  hasBicycleParking   Boolean?
  hasFiberInternet    Boolean?
  hasElevator         Boolean?
  isLGBTQFriendly     Boolean                  @default(false)
  description         String                   @db.Text
  travelTimeToN7      TravelTimeToN7           @relation(fields: [travelTimeId], references: [id])
  travelTimeId        String
  nearbyStations      PublicTransportStation[]
  owner               User                     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId             String
  createdByAdmin      Boolean                  @default(false)
  reports             Report[]
  approved            Boolean                  @default(false)
  archived            Boolean                  @default(false)
  history             AppartmentEdit[]
  importedFromOldSite Boolean                  @default(false)
  likes               Like[]
}

model Photo {
  id          String  @id @unique @default(cuid())
  filename    String  @db.TinyText
  contentType String
  position    Int // Order of this photo in the list, 0-based.
  hash        String?

  Appartment       Appartment?     @relation(fields: [appartmentId], references: [id], onDelete: Cascade)
  appartmentId     String?
  AppartmentEdit   AppartmentEdit? @relation(fields: [appartmentEditId], references: [id], onDelete: Cascade)
  appartmentEditId String?
}

enum AppartmentKind {
  chambre
  studio
  t1
  t1bis
  t2
  t3etplus
  colocation
  autre
}

model AppartmentEdit {
  id                String         @id @unique @default(cuid())
  photos            Photo[]
  rent              Int
  charges           Int
  deposit           Int
  surface           Int
  kind              AppartmentKind
  roomsCount        Int
  availableAt       DateTime
  address           String
  latitude          Float?
  longitude         Float?
  hasFurniture      Boolean?
  hasParking        Boolean?
  hasBicycleParking Boolean?
  hasFiberInternet  Boolean?
  hasElevator       Boolean?
  description       String         @db.Text
  applied           Boolean        @default(false)
  createdAt         DateTime       @default(now())
  appliedAt         DateTime?
  appartment        Appartment     @relation(fields: [appartmentId], references: [id], onDelete: Cascade)
  appartmentId      String
}

model Report {
  id           String       @id @unique @default(cuid())
  reason       ReportReason
  message      String       @db.Text
  createdAt    DateTime     @default(now())
  appartment   Appartment   @relation(fields: [appartmentId], references: [id], onDelete: Cascade)
  appartmentId String
  author       User?        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String?
  contact      String       @default("")
}

enum ReportReason {
  dangerous
  obsolete
  other
}

model TravelTimeToN7 {
  id                String       @id @unique @default(cuid())
  byFoot            Int?
  byBike            Int?
  byPublicTransport Int?
  appartments       Appartment[]
}

model PublicTransportStation {
  id           String              @id @unique @default(cuid())
  name         String
  line         String
  type         PublicTransportType
  color        String?
  Appartment   Appartment?         @relation(fields: [appartmentId], references: [id], onDelete: Cascade)
  appartmentId String?
  latitude     Float
  longitude    Float
}

enum PublicTransportType {
  bus
  bhnf
  metro
  tram
  telepherique
  tad
}

model Log {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action    String   @default("misc")
  level     Int
  message   String   @db.LongText
  ip        String
  userId    String?
}
